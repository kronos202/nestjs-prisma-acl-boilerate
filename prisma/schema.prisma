// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  FACEBOOK
  EMAIL
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

model User {
  id          String    @id @default(cuid())
  email    String  @unique @db.VarChar(100)
  firstName    String? @map("first_name")   @db.VarChar(50)
  lastName    String? @map("last_name")   @db.VarChar(50)

  username String @unique @db.VarChar(50)
  password String? @db.VarChar(255)
  bio      String? @db.Text
  active Boolean @default(false)
  provider Provider? @default(EMAIL) 
  socialId String? @map("social_id")

  avatar String? @default("https://api.realworld.io/images/smiley-cyrus.jpeg")


  deletedAt DateTime? @default(dbgenerated("null")) @map("deleted_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserRole UserRole[]
  Session Session[]

  @@map("user")
}

model Permission {
  id          Int    @id @default(autoincrement())
  method HttpMethod 
  path String @db.VarChar(55)
  category String? @db.VarChar(20)
  description String? @db.Text

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  RolePermission RolePermission[]

  @@map("permission")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  description String? @db.VarChar(255)
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserRole UserRole[]
  RolePermission RolePermission[]
  @@map("role")
}

model UserRole {
 id          Int    @id @default(autoincrement())
  userId    String @map("user_id")
  roleId    Int @map("role_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade) 

  @@unique([userId, roleId])
  @@map("user_role")
}

model RolePermission {
  id          Int    @id @default(autoincrement())
  roleId      Int      @map("role_id")
  permissionId Int    @map("permission_id")

  role        Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId]) // Đảm bảo mỗi cặp Role-Permission là duy nhất
  @@map("user_permission")
}

model Session {
  id          Int    @id @default(autoincrement())
  userId    String  @map("user_id")
  user      User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  hash      String    @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("session")
}
